package com.queen.core.launch;import com.queen.core.launch.constant.AppConstant;import com.queen.core.launch.constant.NacosConstant;import com.queen.core.launch.service.LauncherService;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.boot.web.context.WebServerInitializedEvent;import org.springframework.context.ConfigurableApplicationContext;import org.springframework.context.annotation.Configuration;import org.springframework.context.event.EventListener;import org.springframework.core.annotation.Order;import org.springframework.core.env.*;import org.springframework.scheduling.annotation.Async;import org.springframework.util.Assert;import org.springframework.util.StringUtils;import java.nio.charset.StandardCharsets;import java.util.*;import java.util.function.Function;import java.util.stream.Collectors;/** * @description: 项目启动器，搞定环境变量问题 * @author: jensen * @date: created by 2020/11/22 3:11 */@Slf4j@Configurationpublic class QueenApplication {    /**     * Create an application context     * java -jar app.jar --spring.profiles.active=prod --server.port=2333     *     * @param appName application name     * @param source  The sources     * @return an application context created from the current state     */    public static ConfigurableApplicationContext run(String appName, Class source, String... args) {        SpringApplicationBuilder builder = createSpringApplicationBuilder(appName, source, args);        return builder.run(args);    }    public static SpringApplicationBuilder createSpringApplicationBuilder(String appName, Class source, String... args) {        Assert.hasText(appName, "[appName]服务名不能为空");        // 读取环境变量，使用spring boot的规则        ConfigurableEnvironment environment = new StandardEnvironment();        MutablePropertySources propertySources = environment.getPropertySources();        propertySources.addFirst(new SimpleCommandLinePropertySource(args));        propertySources.addLast(new MapPropertySource(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, environment.getSystemProperties()));        propertySources.addLast(new SystemEnvironmentPropertySource(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, environment.getSystemEnvironment()));        // 获取配置的环境变量        String[] activeProfiles = environment.getActiveProfiles();        // 判断环境:dev、test、prod        List<String> profiles = Arrays.asList(activeProfiles);        // 预设的环境        List<String> presetProfiles = new ArrayList<>(Arrays.asList(AppConstant.DEV_CODE, AppConstant.TEST_CODE, AppConstant.PROD_CODE));        // 交集        presetProfiles.retainAll(profiles);        // 当前使用        List<String> activeProfileList = new ArrayList<>(profiles);        Function<Object[], String> joinFun = StringUtils::arrayToCommaDelimitedString;        SpringApplicationBuilder builder = new SpringApplicationBuilder(source);        String profile;        if (activeProfileList.isEmpty()) {            // 默认dev开发            profile = AppConstant.DEV_CODE;            activeProfileList.add(profile);            builder.profiles(profile);        } else if (activeProfileList.size() == 1) {            profile = activeProfileList.get(0);        } else {            // 同时存在dev、test、prod环境时            throw new RuntimeException("同时存在环境变量:[" + StringUtils.arrayToCommaDelimitedString(activeProfiles) + "]");        }        String startJarPath = QueenApplication.class.getResource("/").getPath().split("!")[0];        String activePros = joinFun.apply(activeProfileList.toArray());        System.out.printf("----启动中，读取到的环境变量:[%s]，jar地址:[%s]----%n", activePros, startJarPath);        Properties props = System.getProperties();        props.setProperty("spring.application.name", appName);        props.setProperty("spring.profiles.active", profile);        props.setProperty("info.version", AppConstant.APPLICATION_VERSION);        props.setProperty("info.desc", appName);        props.setProperty("file.encoding", StandardCharsets.UTF_8.name());        props.setProperty("queen.env", profile);        props.setProperty("queen.name", appName);        props.setProperty("queen.is-local", String.valueOf(isLocalDev()));        props.setProperty("queen.dev-mode", profile.equals(AppConstant.PROD_CODE) ? "false" : "true");        props.setProperty("queen.service.version", AppConstant.APPLICATION_VERSION);        Properties defaultProperties = new Properties();        defaultProperties.setProperty("spring.main.allow-bean-definition-overriding", "true");        defaultProperties.setProperty("spring.sleuth.sampler.percentage", "1.0");        defaultProperties.setProperty("spring.cloud.nacos.config.shared-dataids", NacosConstant.sharedDataIds(profile));        defaultProperties.setProperty("spring.cloud.nacos.config.refreshable-dataids", NacosConstant.sharedDataIds(profile));        defaultProperties.setProperty("spring.cloud.nacos.config.file-extension", NacosConstant.NACOS_CONFIG_FORMAT);        defaultProperties.setProperty("spring.cloud.alibaba.seata.tx-service-group", appName.concat(NacosConstant.NACOS_GROUP_SUFFIX));        builder.properties(defaultProperties);        // 加载自定义组件        List<LauncherService> launcherList = new ArrayList<>();        ServiceLoader.load(LauncherService.class).forEach(launcherList::add);        launcherList.stream().sorted(Comparator.comparing(LauncherService::getOrder)).collect(Collectors.toList())                .forEach(launcherService -> launcherService.launcher(builder, appName, profile, isLocalDev()));        return builder;    }    /**     * 判断是否为本地开发环境     *     * @return boolean     */    public static boolean isLocalDev() {        String osName = System.getProperty("os.name");        return StringUtils.hasText(osName) && !(AppConstant.OS_NAME_LINUX.equals(osName.toUpperCase()));    }}